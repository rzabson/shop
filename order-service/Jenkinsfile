pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME = 'order-service'
        DOCKER_COMPOSE_FILE = 'docker-compose.yml'
        KUBERNETES_DEPLOY_PATH = 'order-service/kubernetes'  // Kubernetes config path

    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'kubernetes-config', url: 'https://github.com/rzabson/shop.git'
            }
        }
        stage('Build JAR') {
            steps {
                script {
                    // Build the JAR file using Maven
                    sh 'mvn -f order-service/pom.xml clean package'
                    sh 'ls order-service/target/'

                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image from the Dockerfile in the order-service directory
                    sh 'docker build -t order-service ./order-service'
                }
            }
        }
        stage('Deploy with Docker Compose') {
            steps {
                script {
                    // Use Docker Compose to deploy the services
                    sh "cd order-service && docker-compose -f ${DOCKER_COMPOSE_FILE} up  -d order-service"
                }
            }
        }
         stage('Push to image registry') {
                    steps {
                        script {
                           sh "docker tag order-service:latest localhost:5000/order-service:latest"
                           sh "docker push localhost:5000/order-service:latest"

                        }
                    }
                }
        stage('Deploy') {
                    steps {
                    withEnv(["KUBECONFIG=/root/.kube/config"]) {
                                         // Deploy the Kubernetes manifests for the order-service
                                         sh "kubectl get pods -n default --no-headers | grep order | awk '{print \$1}' | xargs kubectl delete pod -n default"
                                         sh "kubectl apply -f ${KUBERNETES_DEPLOY_PATH}/deployment.yaml --validate=false"
                                         sh "kubectl apply -f ${KUBERNETES_DEPLOY_PATH}/service.yaml --validate=false"
                        }
                   }
        }
    }

    post {
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
